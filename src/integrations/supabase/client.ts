// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Preferences } from '@capacitor/preferences';
import { Capacitor } from '@capacitor/core';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://ouyilgvqbwcekkajrrug.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "";

// Validate required environment variables
if (!SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing VITE_SUPABASE_ANON_KEY environment variable. Please check your .env file.');
}

// Custom storage adapter for Capacitor mobile apps
const CapacitorStorage = {
  async getItem(key: string): Promise<string | null> {
    if (Capacitor.isNativePlatform()) {
      const { value } = await Preferences.get({ key });
      return value || null;
    } else {
      return localStorage.getItem(key);
    }
  },
  async setItem(key: string, value: string): Promise<void> {
    if (Capacitor.isNativePlatform()) {
      await Preferences.set({ key, value });
    } else {
      localStorage.setItem(key, value);
    }
  },
  async removeItem(key: string): Promise<void> {
    if (Capacitor.isNativePlatform()) {
      await Preferences.remove({ key });
    } else {
      localStorage.removeItem(key);
    }
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configure session persistence for mobile apps
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    // Enable session persistence across app restarts
    persistSession: true,
    // Use Capacitor secure storage for mobile, localStorage for web
    storage: CapacitorStorage,
    // Auto refresh tokens
    autoRefreshToken: true,
    // Detect session in URL for web
    detectSessionInUrl: false,
    // Flow type for mobile apps
    flowType: 'pkce',
    // Debug mode for troubleshooting
    debug: true
  }
});