// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Preferences } from '@capacitor/preferences';
import { Capacitor } from '@capacitor/core';

const SUPABASE_URL = "https://ouyilgvqbwcekkajrrug.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91eWlsZ3ZxYndjZWtrYWpycnVnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5NzU4MzgsImV4cCI6MjA2MzU1MTgzOH0.HPv36VVU0WpAXidt2ZrjzUSuiNPCMaXk2tI8SryitbE";

// Custom storage adapter for Capacitor mobile apps
const CapacitorStorage = {
  async getItem(key: string): Promise<string | null> {
    if (Capacitor.isNativePlatform()) {
      const { value } = await Preferences.get({ key });
      return value || null;
    } else {
      return localStorage.getItem(key);
    }
  },
  async setItem(key: string, value: string): Promise<void> {
    if (Capacitor.isNativePlatform()) {
      await Preferences.set({ key, value });
    } else {
      localStorage.setItem(key, value);
    }
  },
  async removeItem(key: string): Promise<void> {
    if (Capacitor.isNativePlatform()) {
      await Preferences.remove({ key });
    } else {
      localStorage.removeItem(key);
    }
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configure session persistence for mobile apps
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    // Enable session persistence across app restarts
    persistSession: true,
    // Use Capacitor secure storage for mobile, localStorage for web
    storage: CapacitorStorage,
    // Auto refresh tokens
    autoRefreshToken: true,
    // Detect session in URL for web
    detectSessionInUrl: true,
    // Use PKCE on native, implicit on web to ensure password recovery works reliably in browsers
    flowType: Capacitor.isNativePlatform() ? 'pkce' : 'implicit',
    // Debug mode for troubleshooting
    debug: true
  }
});

// Debug: surface key runtime auth configuration and platform
try {
  const maskedUrl = SUPABASE_URL ? `${SUPABASE_URL.slice(0, 20)}...` : 'N/A';
  console.info('[Supabase] Client initialized', {
    platform: Capacitor.getPlatform ? Capacitor.getPlatform() : 'web',
    isNative: Capacitor.isNativePlatform(),
    detectSessionInUrl: true,
    flowType: Capacitor.isNativePlatform() ? 'pkce' : 'implicit',
    supabaseUrlMasked: maskedUrl
  });
} catch (e) {
  // no-op
}